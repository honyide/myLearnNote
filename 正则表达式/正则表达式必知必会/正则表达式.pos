{"diagram":{"elements":{"leftChildren":[],"note":"","watermark":"","children":[{"parent":"root","lineStyle":{"randomLineColor":"#80BA4C"},"children":[{"parent":"89bc019ac025","children":[],"id":"61bf5a0f0c70","title":"搜索"},{"parent":"89bc019ac025","children":[],"id":"d42fb75f37ce","title":"替换"}],"id":"89bc019ac025","title":"用途：以一种简洁的语句来执行一些复杂的字符串处理&nbsp;"},{"parent":"root","children":[],"id":"2deab6fc3564ba28","title":"定义：正则表达式是一些用来匹配和处理文本的字符串"},{"parent":"root","children":[{"parent":"cade55f843b80dff","children":[{"parent":"f744b578c7a0d8e2","children":[],"id":"0eee0418c75d6707","title":"匹配空白字符 \\s（特例 [\\b] 不被匹配 ）"},{"parent":"f744b578c7a0d8e2","children":[{"parent":"79028caa20e718d5","children":[{"parent":"addc36a0ceb05ce0","children":[],"id":"ce95d1d6bc84f1c1","title":"数字匹配 \\d"},{"parent":"addc36a0ceb05ce0","children":[],"id":"1d5727ec61881185","title":"任意字母、数字、 下划线 \\w"},{"parent":"addc36a0ceb05ce0","children":[],"id":"a9904179f14e0c4c","title":"八进制 \\x 、十进制\\0"}],"id":"addc36a0ceb05ce0","title":"类元字符"}],"id":"79028caa20e718d5","title":"匹配特定的字符类别"}],"id":"f744b578c7a0d8e2","title":"用于匹配文本如 .&nbsp;"},{"parent":"cade55f843b80dff","children":[{"parent":"af13f84143e2fc64","children":[{"parent":"20094b748e92249e","children":[],"id":"407baa0693417bb7","title":"以[[开头、以]]结束（两对方括号）。这是使用POSIX字符类所必须的。POSIX字符类必须括在[:和：]之间，我们使用的POSIX字符类是[:xdigit:]（不是：xdigit:）。外层的[和]字符用来定义一个字符集合，内层的[和]字符是POSIX字符类本身的组成部分"}],"id":"20094b748e92249e","title":"POSIX字符类（Javascript不支持）"}],"id":"af13f84143e2fc64","title":"正则表达式的语法要求如： [ ]"},{"parent":"cade55f843b80dff","children":[],"id":"2e22e15fa054556c","title":"注意：元字符在集合[ ]中使用时通常解释为普通字符"}],"id":"cade55f843b80dff","title":"元字符的使用"},{"parent":"root","lineStyle":{"randomLineColor":"#3D5EC2"},"children":[{"parent":"1f9ff6e56023","children":[{"parent":"6025e6f1a0c1","children":[{"parent":"90f6744320164e04","children":[],"id":"5467c473cb17f015","title":"默认行为是返回第一个匹配的结果，绝大多数正则表达式的实现都提供了一种能够把所有的匹配结果全部找出来的机制"}],"id":"90f6744320164e04","title":"匹配纯文本"},{"parent":"6025e6f1a0c1","children":[{"parent":"b0fe1b6df5fdb8ed","children":[],"id":"569f66556670b866","title":"绝大多数匹配中, . 能匹配除了换行符外任意单个字符"}],"id":"b0fe1b6df5fdb8ed","title":"匹配任意字符（ . ）"},{"parent":"6025e6f1a0c1","children":[{"parent":"d85667c12f91947b","children":[],"id":"de739a2ce20fb08a","title":"\\作为转义字符"}],"id":"d85667c12f91947b","title":"匹配特殊字符"}],"id":"6025e6f1a0c1","title":"匹配单个字符"},{"parent":"1f9ff6e56023","children":[{"parent":"7e15c52c9310","children":[{"parent":"e6123b5eb7921264","children":[{"parent":"275d47915f223a48","children":[],"id":"58a79ad6d6bf6740","title":"为了方便字符区间的定义，我们通常会使用连字符 - ，如[A-Z]"}],"id":"275d47915f223a48","title":"可以使用元字符[ ]来匹配多个字符中的一个"},{"parent":"e6123b5eb7921264","children":[],"id":"bc1aa14000cc9e40","title":"字符集合中可以定义多个字符区间"}],"id":"e6123b5eb7921264","title":"元字符[和]"}],"id":"7e15c52c9310","title":"匹配一组字符"},{"parent":"1f9ff6e56023","children":[{"parent":"83470b037954249a","children":[],"id":"7ef487545022fa38","title":"^字符的效果作用于给定字符集合里的所有字符/字符区间，而不局限于跟在^后面的单个字符"},{"parent":"83470b037954249a","children":[],"id":"5e76e005b687a869","title":"元字符^对字符集合进行取非匹配，除了那个字符集合里的字符，其他字符都可以匹配"},{"parent":"83470b037954249a","children":[],"id":"694e99064165b291","title":"^是几个有着多种用途的元字符之一。只有当它出现在一个字符集合里（被放在[和]之间）并紧跟在左方括号[的后面时，它才能发挥“求非”作用。如果是在一个字符集合的外面并位于一个模式的开头，^将匹配字符串的开头"}],"id":"83470b037954249a","title":"取非匹配"},{"parent":"1f9ff6e56023","children":[{"parent":"ca7fa71d9ba047fc","children":[],"id":"b16fdad486baefa8","title":"匹配多个字符 （至少 一个），元字符+"},{"parent":"ca7fa71d9ba047fc","children":[],"id":"d31c4072a9c4da60","title":"匹配0或多个字符，元字符 *"},{"parent":"ca7fa71d9ba047fc","children":[],"id":"0bb6d815473df0ed","title":"匹配0或1 个字符 ，元字符？"},{"parent":"ca7fa71d9ba047fc","children":[{"parent":"398038436b13b901","children":[],"id":"ea28216c6a99b2ed","title":"也可以设置重复次数区间，{最小值，最大值}"},{"parent":"398038436b13b901","children":[],"id":"5946ad493dee324a","title":"设置最小重复次数，{最小值，}"}],"id":"398038436b13b901","title":"设置重复匹配次数，元字符{ }"},{"parent":"ca7fa71d9ba047fc","children":[{"parent":"bed8677c054587e0","children":[],"id":"afe8f4668e5af0e5","title":"*？"},{"parent":"bed8677c054587e0","children":[],"id":"ded96431aaee2f5d","title":"+？"},{"parent":"bed8677c054587e0","children":[],"id":"947f9c6508fe619f","title":"{最小值，}？"}],"id":"bed8677c054587e0","title":"为了防止过度匹配，我们可以采用元字符的懒惰版本"}],"id":"ca7fa71d9ba047fc","title":"重复匹配"},{"parent":"1f9ff6e56023","children":[{"parent":"35e46d92b976e2f6","children":[{"parent":"6e202ddc90bfbff7","children":[],"id":"e77af5e1d0fa6607","title":"\\b匹配的是一个这样的位置，这个位置位于一个能够用来构成单词的字符（字母、数字和下划线，也就是与\\w相匹配的字符）和一个不能用来构成单词的字符（也就是与\\W相匹配的字符）之间"}],"id":"6e202ddc90bfbff7","title":"单词边界的匹配，元字符\\b"},{"parent":"35e46d92b976e2f6","children":[{"parent":"7f940328a7bfc3e2","children":[],"id":"bf2dd34057c828f3","title":"用来定义字符串边界的元字符有两个：一个是用来定义字符串开头的^，另一个是用来定义字符串结尾的$"}],"id":"7f940328a7bfc3e2","title":"字符串边界"},{"parent":"35e46d92b976e2f6","children":[{"parent":"264983aa72b8e5e5","children":[],"id":"c382ec1dfb9b1369","title":"分行匹配模式将使得正则表达式引擎把行分隔符当做一个字符串分隔符来对待。在分行匹配模式下，^不仅匹配正常的字符串开头，还将匹配行分隔符（换行符）后面的开始位置（这个位置是不可见的）；类似地，$不仅匹配正常的字符串结尾，还将匹配行分隔符（换行符）后面的结束位置"},{"parent":"264983aa72b8e5e5","children":[],"id":"7a1ee4c5e9db640c","title":"在使用时，（?&nbsp;m）必须出现在整个模式的最前面"},{"parent":"264983aa72b8e5e5","children":[],"id":"dda640aa40bdbb5d","title":"有许多正则表达式实现不支持（?&nbsp;m）。"}],"id":"264983aa72b8e5e5","title":"分行匹配，（?&nbsp;m）元字符"}],"id":"35e46d92b976e2f6","title":"位置匹配"}],"id":"1f9ff6e56023","title":"匹配"},{"parent":"root","children":[{"parent":"a458c02dc852e2b5","children":[],"id":"52ed0a5f305384f0","title":"子表达式是一个更大的表达式的一部分；把一个表达式划分为一系列子表达式的目的是为了把那些子表达式当作一个独立元素来使用"},{"parent":"a458c02dc852e2b5","children":[],"id":"98e0709ca588a614","title":"子表达式必须使用（）元字符括起来"},{"parent":"a458c02dc852e2b5","children":[],"id":"559572c72c345cff","title":"子表达式允许嵌套。事实上，子表达式允许多重嵌套，这种嵌套的层次在理论上没有限制"},{"parent":"a458c02dc852e2b5","children":[],"id":"c3efd09be5452286","title":"理解嵌套子表达式的关键是要根据从内到外的原则把它们分解开、每次只分析和理解一个子表达式"}],"id":"a458c02dc852e2b5","title":"子表达式的使用"},{"parent":"root","children":[{"parent":"219fc97f768cfa4a","children":[{"parent":"0879dd1856947564","children":[],"id":"443e85aeb6aab1ae","title":"当我们在前文中使用了子表达式（&nbsp; ）时，我们就可以使用 \\1引用 第一个子表达式 \\2引用第二个......"},{"parent":"0879dd1856947564","children":[],"id":"0db949d23b40a5f0","title":"第0个匹配（\\0）可以用来代表整个正则表达式。"}],"id":"0879dd1856947564","title":"回溯引用允许正则表达式模式引用前面的匹配结果"},{"parent":"219fc97f768cfa4a","children":[],"id":"6a8e3c5037c3dda9","title":"回溯引用指的是模式的后半部分引用在前半部分中定义的子表达式"},{"parent":"219fc97f768cfa4a","children":[],"id":"bd4ac4b984fb9323","title":"注意：不同的正则表达式在实现回溯引用的语法方面往往有着巨大的差异。"},{"parent":"219fc97f768cfa4a","children":[{"parent":"762dbbfd84e2112d","children":[],"id":"8ff6233f97be4b26","title":"命名捕获”（named&nbsp;capture）：给某个子表达式起一个唯一的名字，然后用这个名字（而不是相对位置）来引用这个子表达式"},{"parent":"762dbbfd84e2112d","children":[],"id":"e1002c5ee0261c7f","title":"但是命名没有得到广泛支持，而且已支持的实现具体的语法也极不统一"}],"id":"762dbbfd84e2112d","title":"命名捕获"}],"id":"219fc97f768cfa4a","title":"回溯引用"},{"parent":"root","children":[{"parent":"e6d9fe500a4dbd70","children":[{"parent":"438a415c07582c41","children":[],"id":"6946e0542cc28b84","title":"一个向前查找模式其实就是一个以？=开头的子表达式，需要匹配的文本跟在=的后面"},{"parent":"438a415c07582c41","children":[],"id":"f356b592f9a185a7","title":"？=向正则表达式引擎表明：只要找到：就行了，不要把它包括在最终的匹配结果里——用术语来说，就是“不消费”它。"}],"id":"438a415c07582c41","title":"向前查找"},{"parent":"e6d9fe500a4dbd70","children":[{"parent":"bcd7d6e52e3bd719","children":[],"id":"4744ad6c9c5ec7f4","title":"Java、.NET、PHP和Perl都支持向后查找（但有一些限制）"},{"parent":"bcd7d6e52e3bd719","children":[],"id":"3778f52543b62e52","title":"查找出现在被匹配文本之前的字符（但不消费它），向后查找操作符是？&lt;="}],"id":"bcd7d6e52e3bd719","title":"向后查找"},{"parent":"e6d9fe500a4dbd70","children":[],"id":"717050cdfdc4030d","title":"<b>向前查找模式的长度是可变的，它们可以包含．和+之类的元字符，所以它们非常灵活。而向后查找模式只能是固定长度——这是一条几乎所有的正则表达式实现都遵守的限制。</b>"},{"parent":"e6d9fe500a4dbd70","children":[{"parent":"edccad8002d08138","children":[],"id":"ce37bc0e8841306d","title":"正向前查找 ?="},{"parent":"edccad8002d08138","children":[],"id":"edecbd7da009951e","title":"负向前查找 ?!"},{"parent":"edccad8002d08138","children":[],"id":"21dcbeb3d1e11d58","title":"正向后查找 ?&lt;="},{"parent":"edccad8002d08138","children":[],"id":"8bb2c437d069e103","title":"负向后查找 ?&lt;!"}],"id":"edccad8002d08138","title":"前后查找用！来取非"},{"parent":"e6d9fe500a4dbd70","children":[],"id":"ebc69adf1315cda1","title":"注意：向前查找（和向后查找）匹配本身其实是有返回结果的，只是这个结果的字节长度永远是0而已。因此，前后查找操作有时也被称为零宽度（zero-width）匹配操作"},{"parent":"e6d9fe500a4dbd70","children":[{"parent":"d653eb7dcb010844","children":[],"id":"48272f6fa9114e90","title":"有些正则表达式文档使用术语“消费”（consume）来表述“匹配和返回文本”的含义。在向前查找里，被匹配的文本不包含在最终返回的匹配结果里，这被称为“不消费”。"}],"id":"d653eb7dcb010844","title":"消费"}],"id":"e6d9fe500a4dbd70","title":"前后查找（用正则表达式标记要匹配的文本的位置（而不仅仅是文本本身）&nbsp;"},{"parent":"root","children":[{"parent":"17546cba5754a59f","children":[],"id":"252cf035354e7f9e","title":"根据前后查找进行条件处理"},{"parent":"17546cba5754a59f","children":[],"id":"ae011debdbb983f2","title":"根据回溯引用进行条件处理"}],"id":"17546cba5754a59f","title":"嵌入条件"}],"root":true,"theme":"delicate_dark","showWatermark":false,"id":"root","title":"正则表达式","version":10,"structure":"mind_free"}},"meta":{"exportTime":"2023-03-21 20:57:55","member":"","diagramInfo":{"creator":"","created":"2023-03-21 16:32:59","modified":"2023-03-21 20:57:47","title":"正则表达式","category":"mind_free"},"id":"64196bbb352461747506310b","type":"ProcessOn Schema File","version":"1.0"}}